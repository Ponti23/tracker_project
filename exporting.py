import matplotlib.pyplot as plt
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import inch
from reportlab.lib.utils import ImageReader
import os
import math

from datetime import datetime

def plot_raw_data(raw_data, background_data, threshold_data, output_image='raw_data_plot.png'):
    """
    Plots raw_data, background_data, and threshold_data on the same graph using matplotlib
    and saves the plot as a PNG image.
    """
    plt.figure(figsize=(8, 6))
    
    # Plot raw data, background data, and threshold data
    plt.plot(raw_data, label="Raw Data", color='red', linewidth=2)
    plt.plot(background_data, label="Background Data", color='blue', linestyle='--', linewidth=2)
    plt.plot(threshold_data, label="Threshold Data", color='green', linestyle='-.', linewidth=2)
    
    # Add labels and title
    plt.xlabel("Index")
    #plt.ylabel("Value")
    plt.title("Raw Data, Background Data, and Threshold Data")
    plt.legend()
    
    # Save plot to file
    plt.tight_layout()
    plt.savefig(output_image, format='png')
    plt.close()

def plot_peak_data(x_axis, y_axis, index, output_image='peak_data_plot.png'):
    """
    Plots the x_axis and y_axis data for a peak on a graph using matplotlib
    and saves the plot as a PNG image.
    """
    plt.figure(figsize=(8, 6))
    
    # Plot X and Y axis data
    plt.plot(x_axis, y_axis, label=f"Peak Data", color='red', linewidth=2)
    
    # Add labels and title
    plt.ylabel("Index")
    plt.title(f"Peak Index {index}")
    plt.legend()
    
    # Save plot to file
    plt.tight_layout()
    plt.savefig(output_image, format='png')
    plt.close()

def add_template(height, width, c):
    # Add Header Image
    header_image_path = os.path.join('resources', 'header.png')
    if os.path.exists(header_image_path):
        header_img = ImageReader(header_image_path)
        c.drawImage(header_img, 0, height - 70, width=width, height=170)  # Adjust the dimensions and position as needed

      # Add Header Image
    footer_image_path = os.path.join('resources', 'footer.png')
    if os.path.exists(footer_image_path):
        footer_img = ImageReader(footer_image_path)
        c.drawImage(footer_img, 0, 0, width=width, height=100)  # Adjust the dimensions and position as needed


def create_pdf(data):
    # Create a canvas object
    pdf_file = f"{data['file_name'].replace('.CSV', '')}_Report.pdf"
    c = canvas.Canvas(pdf_file, pagesize=A4)
    width, height = A4
    height -= 100

    # CURRENT DATE AND TIME
    now = datetime.now()
    formatted_date = now.strftime("%A, %B %d, %Y")  # Full weekday name, full month name, day, year
    formatted_time = now.strftime("%H:%M:%S")      # 24-hour clock time with hours, minutes, and seconds
    
    ###################################
    ###         TITLE PAGE          ###
    ###################################
    add_template(height, width, c)
    c.setFont("Courier-Bold", 18)
    c.drawString(75, height - 100 -250, f"Report Generated by Petritek Tracker App")

    # Draw a horizontal line below "TEST"
    c.setStrokeColorRGB(255, 0, 0)  # Black color for the line
    c.setLineWidth(0.1)
    c.line(72, height - 115-250, width - 72, height - 115-250)  # Line coordinates

    c.setFont("Courier", 12)
    c.drawString(75, height - 130 -255, f"{formatted_date}")
    c.drawString(75, height - 150 -255, f"{formatted_time}")
    c.showPage()

    ###################################
    ###         OVERVIEW PAGE       ###
    ###################################
    add_template(height, width, c)

    # Generate the plot and save it
    plot_raw_data(data['raw_data'], data['background_data'], data['threshold_data'], output_image="raw_data_plot.png")
    
    # Embed the plot on the second page
    img = ImageReader("raw_data_plot.png")
    c.drawImage(img, inch-10, height - 400, width=6.5 * inch, height=5 * inch)
    

    c.setFont("Courier-Bold", 16)
    c.drawString(50, height - 415 , f"Data Overview")

    # Draw a horizontal line below "TEST"
    c.setStrokeColorRGB(255, 0, 0)  # Black color for the line
    c.setLineWidth(0.1)
    c.line(50, height - 425, width - 72, height - 425)  # Line coordinates

    c.setFont("Courier", 12)
    c.drawString(50, height - 445, 
                 f"Overall Detections over the last {math.ceil(float(
                     data['recording_elapsed']))} Days:                        {data['total_peak']}")
    c.drawString(50, height - 445 -30, 
                 f"Device Initialized:                            {data['date_start']}   {data['time_start']}")
    c.drawString(50, height - 445 -45, 
                 f"Device Terminated:                             {data['date_end']}   {data['time_end']}")
    c.drawString(50, height - 445 -60 -15, 
                 f"Calibration Factor:                                          {data['calibration_factor']}")
    c.drawString(50, height - 445 -60 -30, 
                 f"Tube Voltage:                                                {data['tube_voltage']}")
   

    c.showPage()
    ####################################
    ###          PEAK PAGES          ###
    ####################################
    #NEXT PAGE
    # List of image files to delete later
    images_to_delete = ["raw_data_plot.png"]


    peak_counter = 1
    # Iterate over available indices in peak_data
    for peak in data['peak_data']:
        if 'index' in peak:  # Ensure there's an available 'index'
            add_template(height, width, c)
            # Generate the plot for the peak data
            peak_image = f"peak_{peak['index']}_plot.png"
            plot_peak_data(peak['x-axis'], peak['y-axis'], peak['index'], output_image=peak_image)
            
            # Embed the peak data plot
            img_peak = ImageReader(peak_image)
            c.drawImage(img_peak, inch-10, height - 400, width=6.5 * inch, height=5 * inch)

            # Add the image to the list of files to delete later
            images_to_delete.append(peak_image)
            
            

            c.setFont("Courier-Bold", 16)
            c.drawString(50, height - 415 , f"Detected Peak No:                                {peak_counter}")
            peak_counter += 1

            # Draw a horizontal line below "TEST"
            c.setStrokeColorRGB(255, 0, 0)  # Black color for the line
            c.setLineWidth(0.1)
            c.line(50, height - 425, width - 72, height - 425)  # Line coordinates

            c.setFont("Courier", 12)
            c.drawString(50, height - 445, 
                        f"Date Detected:                                 {peak['date']}   {peak['time']}")


            
            c.showPage()

    # Save the PDF
    c.save()
    print(f"PDF report saved as {pdf_file}")

    # Remove all temporary PNG files
    for image_file in images_to_delete:
        if os.path.exists(image_file):
            os.remove(image_file)
            print(f"Deleted {image_file}")


# Example usage
json_data = {
    'file_name': 'TEST_2_PEAKS.CSV',
    'date_start': '07-01-24',
    'time_start': '00:00:00',
    'date_end': '23-01-24',
    'time_end': '16:36:43',
    'calibration_factor': '00000',
    'tube_voltage': '00780',
    'recording_elapsed': '15.85832175925926',
    'total_peak': '3',
    'peak_data': [
        {'index': 1446106, 'date': '12-01-24', 'time': '00:26:11', 'x-axis': [1446096, 1446097, 1446098], 'y-axis': [0, 1, 0]}, 
        {'index': 3489549, 'date': '17-01-24', 'time': '22:20:32', 'x-axis': [3489539, 3489540, 3489541], 'y-axis': [0, 2, 0]}, 
        {'index': 5134971, 'date': '22-01-24', 'time': '16:36:27', 'x-axis': [5134961, 5134962, 5134963], 'y-axis': [1, 3, 1]}
    ],
    'raw_data': [0,0,0,10000000,100000000,10000000,0],
    'background_data': [0,0,0,10000,100000,10000,0],
    'threshold_data': [10,10,10,1000000,10000000,1000000,10]
}

create_pdf(json_data)